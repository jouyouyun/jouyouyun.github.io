<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NOTE on jouyouyun&#39;s blog</title>
    <link>https://jouyouyun.github.io/categories/note/</link>
    <description>Recent content in NOTE on jouyouyun&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>jouyouyun</copyright>
    <lastBuildDate>Sun, 02 Dec 2018 21:38:21 +0800</lastBuildDate>
    
	<atom:link href="https://jouyouyun.github.io/categories/note/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>python3 学习笔记</title>
      <link>https://jouyouyun.github.io/post/python-learn-note/</link>
      <pubDate>Sun, 02 Dec 2018 21:38:21 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/python-learn-note/</guid>
      <description>Python3 Study Notes 本人很少写 python 代码, 一般都是用 go 的, 去年时用 python 写过一些收集系统信息的工具, 当时是边看手册边写的. 如今又要用 python 来写一个生成 xlsx 的工具, 就又需</description>
    </item>
    
    <item>
      <title>Go 包管理之gom</title>
      <link>https://jouyouyun.github.io/post/go-package-management/</link>
      <pubDate>Tue, 27 Nov 2018 21:38:21 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/go-package-management/</guid>
      <description>Go Module 使用 Go Module 是官方用来管理 package 依赖的工具, 1.11 新加的, 使用时需要设置变量: GO111MODULE=on . go mod help 可以查看其帮助文档: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</description>
    </item>
    
    <item>
      <title>Linux Signal Examples</title>
      <link>https://jouyouyun.github.io/post/linux-signal-example/</link>
      <pubDate>Tue, 13 Nov 2018 21:38:21 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/linux-signal-example/</guid>
      <description>信号是系统响应某些条件而产生的一个事件，接收到该信的进程做出相应的处理。通常信是由错误产生的，如段错误(SIGSEGV)。 但信还可以作为进程</description>
    </item>
    
    <item>
      <title>CUPS 资料</title>
      <link>https://jouyouyun.github.io/post/cups-notes/</link>
      <pubDate>Sun, 08 Apr 2018 21:38:21 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/cups-notes/</guid>
      <description>Installation sudo apt install cups ghostscript gsfonts Driver gutenprint 一组质量非常好的驱动集合，支持的目标机型包括 Canon, Epson, Lexmark, Sony, Olympus ；以及配合 CUPS/GhostSscript/Foomatic/GIMP 使用的 PCL printers 。 安装包: cups-driver-gutenprint gimp-gutenprint ijsgutenprint printer-driver-gutenprint foomatic Foomatic 是一个基于数据库的，集成</description>
    </item>
    
    <item>
      <title>XRandr Examples</title>
      <link>https://jouyouyun.github.io/post/xrandr-examples/</link>
      <pubDate>Mon, 06 Jun 2016 16:52:30 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/xrandr-examples/</guid>
      <description>由于经常会用到使用 xrandr 设置屏幕属性, 而每次用的时候都要去查 man 手册, 有时还需要上网搜索例子. 这样一来就比较麻烦, 所以就想整理下 xrandr 的用法, 给出一些</description>
    </item>
    
    <item>
      <title>Debug 小结</title>
      <link>https://jouyouyun.github.io/post/debug-summary/</link>
      <pubDate>Wed, 03 Feb 2016 15:06:21 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/debug-summary/</guid>
      <description>调试 bug 的时候要有耐心, 要不断测试, 直到找到问题原因. 确定 bug 出现的方式 一定要找到稳定重现的方式, 这样才能方便下面的调试 如果找不到稳定重现的方法</description>
    </item>
    
    <item>
      <title>xsetwacom 选项说明</title>
      <link>https://jouyouyun.github.io/post/xsetwacom-options/</link>
      <pubDate>Wed, 03 Feb 2016 14:58:21 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/xsetwacom-options/</guid>
      <description>xsetwacom 是一个设置数位板的命令行工具, 在 Debian/Ubuntu/deepin 上可以通过安装 xserver-xorg-input-wacom 来获取它. 可以通过 man xsetwacom 看到它的帮助文档, 下面就简单说明下它的部份选项: Options Area args: x1 y1 x2 y2 default: 0</description>
    </item>
    
    <item>
      <title>Go 笔记: 简单的 TCP Socket 示例</title>
      <link>https://jouyouyun.github.io/post/go-tcp-socket-example/</link>
      <pubDate>Sun, 20 Jul 2014 00:54:21 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/go-tcp-socket-example/</guid>
      <description>一个简单的 TCP Socket 的示例，使用 gob 处理传输的数据。 server.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47</description>
    </item>
    
    <item>
      <title>Go 笔记: Gob Write/Read File</title>
      <link>https://jouyouyun.github.io/post/go-gob-rw-file/</link>
      <pubDate>Mon, 07 Jul 2014 13:06:21 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/go-gob-rw-file/</guid>
      <description>Gob 使用实例，将结构体写入文件里，在需要的时候再从文件中读取出来。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38</description>
    </item>
    
    <item>
      <title>chroot 脚本</title>
      <link>https://jouyouyun.github.io/post/chroot-shell/</link>
      <pubDate>Sat, 05 Jul 2014 21:38:21 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/chroot-shell/</guid>
      <description>最近测试了以下 chroot ，然后把步骤写成了下面两个脚本，方便以后使用。 使用时需要确定每条命令都执行成功了 Arch 分区结构 1 2 3 4 /dev/sda5 / /dev/sda1 /boot /dev/sda6 /home /dev/sda8 Swap chroot 挂载脚本</description>
    </item>
    
    <item>
      <title>Go 笔记: md5 sum</title>
      <link>https://jouyouyun.github.io/post/go-md5-sum/</link>
      <pubDate>Sun, 22 Jun 2014 22:54:38 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/go-md5-sum/</guid>
      <description>使用 Go 语言实现字符串与文件的 MD5 值计算，但是大文件不要使用此方法。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38</description>
    </item>
    
    <item>
      <title>Go 笔记: 判断文件是否存在</title>
      <link>https://jouyouyun.github.io/post/go-file-exist/</link>
      <pubDate>Fri, 20 Jun 2014 21:38:21 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/go-file-exist/</guid>
      <description>使用 GoLang 判断文件是否存在。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package utils import ( &amp;#34;os&amp;#34; ) func isFileExist(filename string) bool { if len(filename) &amp;lt; 1 { return false } _, err := os.Stat(filename) return err == nil || os.IsExist(err) }</description>
    </item>
    
    <item>
      <title>Go 笔记: URI Encode/Decode</title>
      <link>https://jouyouyun.github.io/post/go-uri-encode/</link>
      <pubDate>Fri, 20 Jun 2014 21:20:12 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/go-uri-encode/</guid>
      <description>最近在处理路径时，要求统一用 URI (通用资源标识符) 的格式来表示。偶尔会遇到 URI 被编码的情况，这就需要解码了，故在此把 Encode/Decode URI 的方法记录在此，以备后用</description>
    </item>
    
    <item>
      <title>XRecord 示例</title>
      <link>https://jouyouyun.github.io/post/xrecord-example/</link>
      <pubDate>Fri, 18 Apr 2014 17:42:15 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/xrecord-example/</guid>
      <description>最近在做快捷键绑定的项目，但在绑定单按键时发现 XGrabKey 无法处理。遂请教组长，得知 XRecord 可以处理，于是就去查找 XRecord 的相关资料，但却很少。 所以在此记录一下整</description>
    </item>
    
  </channel>
</rss>