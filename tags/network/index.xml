<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>network on jouyouyun&#39;s blog</title>
    <link>https://jouyouyun.github.io/tags/network/</link>
    <description>Recent content in network on jouyouyun&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>jouyouyun</copyright>
    <lastBuildDate>Sun, 15 Mar 2020 11:38:21 +0800</lastBuildDate><atom:link href="https://jouyouyun.github.io/tags/network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DDE 后端 Tutorial</title>
      <link>https://jouyouyun.github.io/post/dde-daemon-tutorial/</link>
      <pubDate>Sun, 15 Mar 2020 11:38:21 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/dde-daemon-tutorial/</guid>
      <description>dde 后端使用 go 作为主要的开发语言，使用 dbus 提供接口，主要使用 gsettings 来保存配置。所以在进行后端开发前需要对以上内容有基本的了解，这里假定本文档的阅读者熟悉 dbus 和 gsettings ，并有一定的开发经验。
这里就只对 go 进行简单的介绍。
go go 是一种类 c 的语言，但没有了 c 中令人头疼的指针和内存管理问题，极大的提高了开发效率。 go 中使用 package 来封装同一功能的模块，首字母大写的变量和函数是可以被其它 package 使用的。
学习 go 至少需要了解以下内容。
编码风格 go 提供了 gofmt 工具来对代码进行格式化，以使用统一的代码风格。因此在代码保存之前需要使用 gofmt 先进行格式化。
保存前格式化这种操作，一般可在编辑器中配置，如 vim , emacs 等，根据个人习惯选择编辑器。
变量 go 支持使用时声明和使用 var 声明两种方式，如下：
使用 var 声明 // 主动声明 var ( outData []byte err error ) outData, err = os.Exec(&amp;#34;ls&amp;#34;).Output() 使用时声明 // 使用时声明 outData, err := os.</description>
    </item>
    
    <item>
      <title>Linux 硬件信息获取</title>
      <link>https://jouyouyun.github.io/post/linux_hardware_info/</link>
      <pubDate>Wed, 08 May 2019 17:50:00 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/linux_hardware_info/</guid>
      <description>&lt;p&gt;在 &lt;code&gt;linux&lt;/code&gt; 上可以通过 &lt;code&gt;dmidecode&lt;/code&gt; 或是 &lt;code&gt;lshw&lt;/code&gt; 来获取硬件信息，能够方便的查看系统配置。但它们的输出信息过多，解析起来有些麻烦，另外 &lt;code&gt;lshw&lt;/code&gt; 对 &lt;code&gt;usb&lt;/code&gt; 接口的网卡支持不好，显示的信息不够，所以在此整理下通过读文件或是一些简单命令来获取硬件信息的方法。&lt;/p&gt;
&lt;h3 id=&#34;dmi&#34;&gt;&lt;strong&gt;DMI&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;一般情况下内核默认加载了 &lt;code&gt;dmi sysfs&lt;/code&gt; ，路径是 &lt;code&gt;/sys/class/dmi&lt;/code&gt; 。里面包含了 &lt;code&gt;bios&lt;/code&gt; ， &lt;code&gt;board&lt;/code&gt; ， &lt;code&gt;product&lt;/code&gt; 等信息。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
