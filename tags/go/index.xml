<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on jouyouyun&#39;s blog</title>
    <link>https://jouyouyun.github.io/tags/go/</link>
    <description>Recent content in go on jouyouyun&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>jouyouyun</copyright>
    <lastBuildDate>Sun, 15 Mar 2020 11:38:21 +0800</lastBuildDate><atom:link href="https://jouyouyun.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DDE 后端 Tutorial</title>
      <link>https://jouyouyun.github.io/post/dde-daemon-tutorial/</link>
      <pubDate>Sun, 15 Mar 2020 11:38:21 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/dde-daemon-tutorial/</guid>
      <description>dde 后端使用 go 作为主要的开发语言，使用 dbus 提供接口，主要使用 gsettings 来保存配置。所以在进行后端开发前需要对以上内容有基本的了解，这里假定本文档的阅读者熟悉 dbus 和 gsettings ，并有一定的开发经验。
这里就只对 go 进行简单的介绍。
go go 是一种类 c 的语言，但没有了 c 中令人头疼的指针和内存管理问题，极大的提高了开发效率。 go 中使用 package 来封装同一功能的模块，首字母大写的变量和函数是可以被其它 package 使用的。
学习 go 至少需要了解以下内容。
编码风格 go 提供了 gofmt 工具来对代码进行格式化，以使用统一的代码风格。因此在代码保存之前需要使用 gofmt 先进行格式化。
保存前格式化这种操作，一般可在编辑器中配置，如 vim , emacs 等，根据个人习惯选择编辑器。
变量 go 支持使用时声明和使用 var 声明两种方式，如下：
使用 var 声明 // 主动声明 var ( outData []byte err error ) outData, err = os.Exec(&amp;#34;ls&amp;#34;).Output() 使用时声明 // 使用时声明 outData, err := os.</description>
    </item>
    
    <item>
      <title>Go 包管理之gom</title>
      <link>https://jouyouyun.github.io/post/go-package-management/</link>
      <pubDate>Tue, 27 Nov 2018 21:38:21 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/go-package-management/</guid>
      <description>&lt;h2 id=&#34;go-module-使用&#34;&gt;Go Module 使用&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Go Module&lt;/code&gt; 是官方用来管理 &lt;code&gt;package&lt;/code&gt; 依赖的工具, &lt;code&gt;1.11&lt;/code&gt; 新加的, 使用时需要设置变量: &lt;code&gt;GO111MODULE=on&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;code&gt;go mod help&lt;/code&gt; 可以查看其帮助文档:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 笔记: 简单的 TCP Socket 示例</title>
      <link>https://jouyouyun.github.io/post/go-tcp-socket-example/</link>
      <pubDate>Sun, 20 Jul 2014 00:54:21 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/go-tcp-socket-example/</guid>
      <description>&lt;p&gt;一个简单的 &lt;code&gt;TCP Socket&lt;/code&gt; 的示例，使用 &lt;code&gt;gob&lt;/code&gt; 处理传输的数据。&lt;/p&gt;
&lt;h2 id=&#34;server-dot-go&#34;&gt;&lt;code&gt;server.go&lt;/code&gt;&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>Go 笔记: Gob Write/Read File</title>
      <link>https://jouyouyun.github.io/post/go-gob-rw-file/</link>
      <pubDate>Mon, 07 Jul 2014 13:06:21 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/go-gob-rw-file/</guid>
      <description>&lt;p&gt;&lt;code&gt;Gob&lt;/code&gt; 使用实例，将结构体写入文件里，在需要的时候再从文件中读取出来。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 笔记: md5 sum</title>
      <link>https://jouyouyun.github.io/post/go-md5-sum/</link>
      <pubDate>Sun, 22 Jun 2014 22:54:38 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/go-md5-sum/</guid>
      <description>&lt;p&gt;使用 Go 语言实现字符串与文件的 MD5 值计算，但是大文件不要使用此方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 笔记: 判断文件是否存在</title>
      <link>https://jouyouyun.github.io/post/go-file-exist/</link>
      <pubDate>Fri, 20 Jun 2014 21:38:21 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/go-file-exist/</guid>
      <description>&lt;p&gt;使用 GoLang 判断文件是否存在。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;utils&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isFileExist&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;filename&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;filename&lt;/span&gt;) &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Stat&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;filename&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IsExist&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Go 笔记: URI Encode/Decode</title>
      <link>https://jouyouyun.github.io/post/go-uri-encode/</link>
      <pubDate>Fri, 20 Jun 2014 21:20:12 +0800</pubDate>
      
      <guid>https://jouyouyun.github.io/post/go-uri-encode/</guid>
      <description>&lt;p&gt;最近在处理路径时，要求统一用 &lt;code&gt;URI&lt;/code&gt; (通用资源标识符) 的格式来表示。偶尔会遇到 URI 被编码的情况，这就需要解码了，故在此把 &lt;code&gt;Encode/Decode URI&lt;/code&gt; 的方法记录在此，以备后用。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
